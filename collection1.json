{
	"info": {
		"_postman_id": "e0e8259e-7020-44c9-b185-7333a39c90b5",
		"name": "NDB Eng V3 - 2019/07/17 - PY",
		"description": "This performance test should contain:\n\n- Payees validation new endpoint.\n- Card validation new endpoint. \n- Registered payees PATCH endpoint.\n- ACI directory enhacements.\n- MM 2.0.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Background",
			"item": [
				{
					"name": "Get Token 2leg - Simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Body contains access token\"] = responseBody.has(\"access_token\");",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token_type\", data.token_type);",
									"postman.setEnvironmentVariable(\"token\", data.access_token);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{basic_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/auth/token?grant_type=client_credentials",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4cd1ca3-2d2f-404b-bfcf-4d0688faf229",
								"exec": [
									"postman.clearEnvironmentVariable(\"customer_id\");",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"customer_id\", jsonData.data.customerId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6fafbc37-a118-4b47-a87e-4593dabad260",
								"exec": [
									"postman.setEnvironmentVariable('customer-sufix-uuid',Math.floor((Math.random() * 10000000)));",
									"postman.setEnvironmentVariable('customer-ssn',Math.floor((Math.random() * 1000000000)));",
									"var random_lastname='';",
									"var chars = 'abcdefghijklmnopqrstuvwxyz';",
									"for (var i = 7; i > 0; --i) random_lastname += chars[Math.floor(Math.random() * chars.length)];",
									"postman.setEnvironmentVariable('customer-lastname',random_lastname);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Olivia\",\n  \"middleName\": \"Palermo\",\n  \"lastName\": \"{{customer-lastname}}\",\n  \"identityDocuments\":[\n    {\n      \"documentType\":{\n        \"id\":\"DL\"\n      },\n      \"documentNumber\":\"123456789012345\",\n      \"issueDate\": \"2014-12-22\",\n      \"expirationDate\": \"2019-12-22\",\n      \"state\": {\n        \"id\": \"AL\"\n      }\n    }\n  ],\n  \"birthData\": {\n    \"birthDate\": \"1986-05-19\"\n  },\n  \"contactDetails\":[\n    {\n      \"contact\":\"+15551133254\",\n      \"contactType\":{\n        \"id\":\"MOBILE_NUMBER\"\n      }\n    },\n    {\n      \"contact\":\"robert.tesla@spacex.com\",\n      \"contactType\":{\n        \"id\":\"EMAIL\"\n      }\n    }\n  ],\n  \"addresses\":[\n    {\n      \"addressType\":{\n        \"id\":\"LEGAL\"\n      },\n      \"location\":{\n        \"addressName\": \"Fiorina Fury 161 - Weyland-Yutani\",\n        \"city\": \"greensboro\",\n        \"state\":{\n          \"id\":\"GA\"\n        },\n        \"country\":{\n          \"id\":\"USA\"\n        },\n        \"zipCode\": \"30642\"\n      }\n    }\n  ],\n  \"residence\": {\n    \"residenceType\":{\n      \"id\":\"US_CITIZEN\"\n    },\n    \"country\":{\n      \"id\":\"USA\"\n    }\n  },\n  \"economicData\":{\n    \"occupationType\":{\n      \"id\":\"FINANCE_ACCOUNTING_TAX\"\n    },\n    \"indicators\": [\n      {\"id\" : \"CASH\"},\n      {\"id\" : \"INTERNATIONAL_ACH\"}  \n  ],\n  \"incomeSources\": [\n    \"INHERITANCE\", \"SALARY\"\n  ]\n  },\n  \"socialSecurityNumber\":\"{{customer-ssn}}\",\n  \"nationalities\":[{\"id\": \"USA\"}],\n  \"politicallyExposedPerson\": {\n    \"id\": \"NO_PEP\"\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/customers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "post account Internal NON FBO account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f8cc925-8d3d-48b9-ac98-9501baccb396",
								"exec": [
									"postman.clearEnvironmentVariable(\"internal_non_fbo_account_number\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"internal_non_fbo_account_number\", jsonData.data.number);",
									"tests[\"Account id updated: \"+postman.getEnvironmentVariable(\"internal_non_fbo_account_number\")]= true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "jwt {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"accountFamily\":{\n      \"id\":\"COMMON\"\n   },\n   \"joint\":{\n      \"id\":\"SINGLE\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"accounts"
							]
						}
					},
					"response": [
						{
							"name": "201 Create Account Default",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": false
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": false
									},
									{
										"key": "Authorization",
										"value": "jwt {{cosaPrime}}",
										"disabled": false
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{last_customer_reference_id_created}}",
										"description": "897a6744-d68f-4144-9ec4-6c9be062dbf2",
										"disabled": false
									},
									{
										"key": "vnd.bbva.user-id",
										"value": "profile-12305751",
										"disabled": true
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "app.paas.dev",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"accountType\":{\n      \"id\":\"COMMON_ACCOUNT\"\n   },\n   \"title\":{\n      \"id\":\"titleId\"\n   },\n   \"joint\":{\n      \"id\":\"SINGLE\"\n   },\n   \"participants\":[]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"accounts"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Accept-Charset",
									"value": "us-ascii",
									"name": "Accept-Charset",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 24 Jul 2017 18:23:32 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Expires",
									"value": "0",
									"name": "Expires",
									"description": ""
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=150",
									"name": "Keep-Alive",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains; preload",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block",
									"name": "X-XSS-Protection",
									"description": ""
								},
								{
									"key": "status-code",
									"value": "403",
									"name": "status-code",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"result\":{\"code\":403,\"info\":\"org.springframework.web.client.HttpClientErrorException: 403 Forbidden\\n\\tat org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:91)\\n\\tat org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:700)\\n\\tat org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:653)\\n\\tat org.springframework.web.client.RestTemplate.execute(RestTemplate.java:628)\\n\\tat org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:549)\\n\\tat com.bbva.dyd.sl.rs.controller.ResourceServerProxyController.execute(ResourceServerProxyController.java:193)\\n\\tat sun.reflect.GeneratedMethodAccessor168.invoke(Unknown Source)\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.lang.reflect.Method.invoke(Method.java:498)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\\n\\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:648)\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\\n\\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.log.filter.AuditFilter.doFilter(AuditFilter.java:39)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)\\n\\tat com.bbva.dyd.sl.integrity.checker.filter.IntegrityCheckerFilter.doFilter(IntegrityCheckerFilter.java:107)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)\\n\\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.auth.filter.StateMachineFilter.doFilter(StateMachineFilter.java:93)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.auth.filter.BasicAuthenticationProcessingFilter.doFilter(BasicAuthenticationProcessingFilter.java:76)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.origin.OriginHostCheckFilter.doFilter(OriginHostCheckFilter.java:60)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.rs.filter.ClientIdFilter.doFilter(ClientIdFilter.java:61)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:107)\\n\\tat com.bbva.dyd.sl.auth.filter.RefreshTokenFilter.doFilter(RefreshTokenFilter.java:73)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:112)\\n\\tat com.bbva.dyd.sl.auth.filter.TokenAuthenticationProcessingFilter.doFilter(TokenAuthenticationProcessingFilter.java:126)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:112)\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:73)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.certificate.filter.ClientCertificateProcessingFilter.doFilter(ClientCertificateProcessingFilter.java:71)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.auth.filter.ServiceContextFilter.doFilter(ServiceContextFilter.java:55)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.CorsFilter.handleNonCORS(CorsFilter.java:611)\\n\\tat com.bbva.dyd.sl.filter.CorsFilter.doFilter(CorsFilter.java:303)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.SecurityTransactionIdFilter.doFilter(SecurityTransactionIdFilter.java:109)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.SessionLessFilter.doFilter(SessionLessFilter.java:24)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.ExceptionHandlerFilter.doFilter(ExceptionHandlerFilter.java:32)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\\n\\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528)\\n\\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099)\\n\\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476)\\n\\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\n\\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\n\\tat java.lang.Thread.run(Thread.java:748)\\n\",\"internal_code\":\"backend_error\"}}"
						}
					]
				},
				{
					"name": "post account Internal FBO account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c57f580-0dcb-4718-ab8f-54c1b65fcd91",
								"exec": [
									"postman.clearEnvironmentVariable(\"internal_fbo_account_number\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"internal_fbo_account_number\", jsonData.data.number);",
									"tests[\"Account id updated: \"+postman.getEnvironmentVariable(\"internal_fbo_account_number\")]= true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "jwt {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"accountFamily\":{\n      \"id\":\"COMMON\"\n   },\n   \"joint\":{\n      \"id\":\"SINGLE\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"accounts"
							]
						}
					},
					"response": [
						{
							"name": "201 Create Account Default",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": false
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": false
									},
									{
										"key": "Authorization",
										"value": "jwt {{cosaPrime}}",
										"disabled": false
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{last_customer_reference_id_created}}",
										"description": "897a6744-d68f-4144-9ec4-6c9be062dbf2",
										"disabled": false
									},
									{
										"key": "vnd.bbva.user-id",
										"value": "profile-12305751",
										"disabled": true
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "app.paas.dev",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"accountType\":{\n      \"id\":\"COMMON_ACCOUNT\"\n   },\n   \"title\":{\n      \"id\":\"titleId\"\n   },\n   \"joint\":{\n      \"id\":\"SINGLE\"\n   },\n   \"participants\":[]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"accounts"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Accept-Charset",
									"value": "us-ascii",
									"name": "Accept-Charset",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-cache",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF8",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Mon, 24 Jul 2017 18:23:32 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "Expires",
									"value": "0",
									"name": "Expires",
									"description": ""
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5, max=150",
									"name": "Keep-Alive",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Server",
									"value": "Apache-Coyote/1.1",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains; preload",
									"name": "Strict-Transport-Security",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block",
									"name": "X-XSS-Protection",
									"description": ""
								},
								{
									"key": "status-code",
									"value": "403",
									"name": "status-code",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\"result\":{\"code\":403,\"info\":\"org.springframework.web.client.HttpClientErrorException: 403 Forbidden\\n\\tat org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:91)\\n\\tat org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:700)\\n\\tat org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:653)\\n\\tat org.springframework.web.client.RestTemplate.execute(RestTemplate.java:628)\\n\\tat org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:549)\\n\\tat com.bbva.dyd.sl.rs.controller.ResourceServerProxyController.execute(ResourceServerProxyController.java:193)\\n\\tat sun.reflect.GeneratedMethodAccessor168.invoke(Unknown Source)\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.lang.reflect.Method.invoke(Method.java:498)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\\n\\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:648)\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\\n\\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.log.filter.AuditFilter.doFilter(AuditFilter.java:39)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:317)\\n\\tat com.bbva.dyd.sl.integrity.checker.filter.IntegrityCheckerFilter.doFilter(IntegrityCheckerFilter.java:107)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)\\n\\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.auth.filter.StateMachineFilter.doFilter(StateMachineFilter.java:93)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.auth.filter.BasicAuthenticationProcessingFilter.doFilter(BasicAuthenticationProcessingFilter.java:76)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.origin.OriginHostCheckFilter.doFilter(OriginHostCheckFilter.java:60)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.rs.filter.ClientIdFilter.doFilter(ClientIdFilter.java:61)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:107)\\n\\tat com.bbva.dyd.sl.auth.filter.RefreshTokenFilter.doFilter(RefreshTokenFilter.java:73)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:112)\\n\\tat com.bbva.dyd.sl.auth.filter.TokenAuthenticationProcessingFilter.doFilter(TokenAuthenticationProcessingFilter.java:126)\\n\\tat org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:112)\\n\\tat org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:73)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.certificate.filter.ClientCertificateProcessingFilter.doFilter(ClientCertificateProcessingFilter.java:71)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat com.bbva.dyd.sl.auth.filter.ServiceContextFilter.doFilter(ServiceContextFilter.java:55)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\\n\\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214)\\n\\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.CorsFilter.handleNonCORS(CorsFilter.java:611)\\n\\tat com.bbva.dyd.sl.filter.CorsFilter.doFilter(CorsFilter.java:303)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.SecurityTransactionIdFilter.doFilter(SecurityTransactionIdFilter.java:109)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.SessionLessFilter.doFilter(SessionLessFilter.java:24)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\\n\\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat com.bbva.dyd.sl.filter.ExceptionHandlerFilter.doFilter(ExceptionHandlerFilter.java:32)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\\n\\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528)\\n\\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099)\\n\\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476)\\n\\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\n\\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\n\\tat java.lang.Thread.run(Thread.java:748)\\n\",\"internal_code\":\"backend_error\"}}"
						}
					]
				},
				{
					"name": "POST fund Internal NON FBO account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c768fdf5-b4a1-47a2-b330-9a8f7edf183b",
								"exec": [
									"postman.setEnvironmentVariable(\"paymentId\", getRandomInt(100000000000,999999999999))",
									"",
									"function getRandomInt(min, max) {",
									"  return Math.floor(Math.random() * (max - min)) + min;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"type": "text",
								"value": "{{customer_id}}",
								"disabled": true
							},
							{
								"key": "vnd.bbva.application-id",
								"type": "text",
								"value": "{{app-id}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"paymentId\": \"{{paymentId}}\",\n\t\"accountNumber\": \"{{internal_non_fbo_account_number}}\",\n    \"type\": {\n        \"id\": \"CREDIT\"\n    },\n    \"transactionAmount\": {\n        \"amount\": 100000.00,\n        \"currency\": \"USD\"\n    },\n    \"moneyMovementType\": { \n    \t\"id\":\"INTERNAL\"\n    },\n    \"description\": \"Demo 03/12/19\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/transfers/gl-transfers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"transfers",
								"gl-transfers"
							]
						},
						"description": "Create a new transaction in ALNOVA.\n\nThe new transaction is not saved in mongo.\n\n- \"paymentId\"\n- \"accountNumber\"\n- \"type.id\"\n  - CREDIT: BBVA account is credited and GL account is debited.\n  - DEBIT: BBVA account is debited and GL account is credited.\n- \"transactionAmount.amount\"\n- \"transactionAmount.currency\"\n- \"description\"\n\nAccount numbers you can use: 6740329454, 6740319661, 6710920832"
					},
					"response": []
				},
				{
					"name": "POST fund Internal FBO account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c768fdf5-b4a1-47a2-b330-9a8f7edf183b",
								"exec": [
									"postman.setEnvironmentVariable(\"paymentId\", getRandomInt(100000000000,999999999999))",
									"",
									"function getRandomInt(min, max) {",
									"  return Math.floor(Math.random() * (max - min)) + min;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"type": "text",
								"value": "{{customer_id}}",
								"disabled": true
							},
							{
								"key": "vnd.bbva.application-id",
								"type": "text",
								"value": "{{app-id}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"paymentId\": \"{{paymentId}}\",\n\t\"accountNumber\": \"{{internal_fbo_account_number}}\",\n    \"type\": {\n        \"id\": \"CREDIT\"\n    },\n    \"transactionAmount\": {\n        \"amount\": 100000.00,\n        \"currency\": \"USD\"\n    },\n    \"moneyMovementType\": { \n    \t\"id\":\"INTERNAL\"\n    },\n    \"description\": \"Demo 03/12/19\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/transfers/gl-transfers",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"transfers",
								"gl-transfers"
							]
						},
						"description": "Create a new transaction in ALNOVA.\n\nThe new transaction is not saved in mongo.\n\n- \"paymentId\"\n- \"accountNumber\"\n- \"type.id\"\n  - CREDIT: BBVA account is credited and GL account is debited.\n  - DEBIT: BBVA account is debited and GL account is credited.\n- \"transactionAmount.amount\"\n- \"transactionAmount.currency\"\n- \"description\"\n\nAccount numbers you can use: 6740329454, 6740319661, 6710920832"
					},
					"response": []
				},
				{
					"name": "GET Partners by app-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d7490e7-c079-41b1-93ca-7557d91ffc6f",
								"exec": [
									"",
									"postman.clearEnvironmentVariable(\"partner_accounts\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var fbo_account={",
									"    \"number\": \"{{internal_fbo_account_number}}\",",
									"    \"accountType\": {",
									"        \"id\": \"FBO_ACCOUNT\"",
									"    }",
									"};  ",
									"",
									"jsonData.data[0].accounts.push(fbo_account);",
									"postman.setEnvironmentVariable(\"partner_accounts\", JSON.stringify(jsonData.data[0].accounts));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/v3/partners?applicationId={{app-id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"partners"
							],
							"query": [
								{
									"key": "applicationId",
									"value": "{{app-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Partners to include new FBO",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{     \n\t\"accounts\": {{partner_accounts}}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/partners/{{app-id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"partners",
								"{{app-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Registered Internal NON FBO Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d2e9546-263a-4e31-9b25-44a87e51e144",
								"exec": [
									"postman.clearEnvironmentVariable(\"internal_non_fbo_account\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"internal_non_fbo_account\", jsonData.data.accountId);",
									"tests[\"Account id updated: \"+postman.getEnvironmentVariable(\"internal_non_fbo_account\")]= true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountNumber\": \"{{internal_non_fbo_account_number}}\",\n    \"bankRoutingNumber\": \"062001186\",\n    \"alias\": \"savings\",\n    \"currency\": \"USD\",\n    \"accountType\": {\"id\": \"CONSUMER_CHECKING\"},\n    \"nameOnAccount\": \"Kate Donald\",\n    \"usageLimits\": {\"id\": \"SEND_AND_RECEIVE\"}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-accounts"
							]
						},
						"description": "Create a new transaction in ALNOVA.\n\nThe new transaction doesn't save in mongo."
					},
					"response": []
				},
				{
					"name": "POST Registered Internal FBO Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d2e9546-263a-4e31-9b25-44a87e51e144",
								"exec": [
									"postman.clearEnvironmentVariable(\"internal_fbo_account\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"internal_fbo_account\", jsonData.data.accountId);",
									"tests[\"Account id updated: \"+postman.getEnvironmentVariable(\"internal_fbo_account\")]= true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountNumber\": \"{{internal_fbo_account_number}}\",\n    \"bankRoutingNumber\": \"062001186\",\n    \"alias\": \"savings\",\n    \"currency\": \"USD\",\n    \"accountType\": {\"id\": \"POOLED\"},\n    \"nameOnAccount\": \"Kate Donald\",\n    \"usageLimits\": {\"id\": \"SEND_AND_RECEIVE\"}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-accounts"
							]
						},
						"description": "Create a new transaction in ALNOVA.\n\nThe new transaction doesn't save in mongo."
					},
					"response": []
				},
				{
					"name": "POST Registered External Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d2e9546-263a-4e31-9b25-44a87e51e144",
								"exec": [
									"postman.clearEnvironmentVariable(\"external_account\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"external_account\", jsonData.data.accountId);",
									"tests[\"Account id updated: \"+postman.getEnvironmentVariable(\"external_account\")]= true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountNumber\": \"6744803886\",\n    \"bankRoutingNumber\": \"121042882\",\n    \"alias\": \"savings\",\n    \"currency\": \"USD\",\n    \"accountType\": {\"id\": \"CONSUMER_CHECKING\"},\n    \"nameOnAccount\": \"Kate Donald\",\n    \"usageLimits\": {\"id\": \"SEND_AND_RECEIVE\"}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-accounts"
							]
						},
						"description": "Create a new transaction in ALNOVA.\n\nThe new transaction doesn't save in mongo."
					},
					"response": []
				},
				{
					"name": "POST Registered External Account 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d2e9546-263a-4e31-9b25-44a87e51e144",
								"exec": [
									"postman.clearEnvironmentVariable(\"external_account_2\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"external_account_2\", jsonData.data.accountId);",
									"tests[\"Account id updated: \"+postman.getEnvironmentVariable(\"external_account_2\")]= true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountNumber\": \"6744803888\",\n    \"bankRoutingNumber\": \"121042882\",\n    \"alias\": \"savings\",\n    \"currency\": \"USD\",\n    \"accountType\": {\"id\": \"CONSUMER_CHECKING\"},\n    \"nameOnAccount\": \"Kate Donald\",\n    \"usageLimits\": {\"id\": \"SEND_AND_RECEIVE\"}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-accounts"
							]
						},
						"description": "Create a new transaction in ALNOVA.\n\nThe new transaction doesn't save in mongo."
					},
					"response": []
				},
				{
					"name": "POST Registered Payee CHECK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99faf54d-ff0a-43b6-af90-f8c242ec702d",
								"exec": [
									"postman.clearEnvironmentVariable(\"registered_payee_check\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"registered_payee_check\", jsonData.data.id);",
									"tests[\"Payee id updated: \"+postman.getEnvironmentVariable(\"registered_payee_check\")]= true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}",
								"type": "text"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}",
								"type": "text"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payeeName\": \"Dogman\",\n  \"accountNumber\": \"4820006030000000\",\n  \"nameOnAccount\": \"Jenny Hudson\",\n  \"alias\": \"Vanguard\",\n  \"address\": {\n    \"addressLine1\": \"PO BOX 51126\",\n    \"city\": \"LOS ANGELES\",\n    \"state\": {\n      \"id\": \"CA\"\n    },\n    \"zipcode\": \"90051\"\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-payees",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-payees"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Registered Payee ELECTRONIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99faf54d-ff0a-43b6-af90-f8c242ec702d",
								"exec": [
									"postman.clearEnvironmentVariable(\"registered_payee_electronic\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"registered_payee_electronic\", jsonData.data.id);",
									"tests[\"Payee id updated: \"+postman.getEnvironmentVariable(\"registered_payee_electronic\")]= true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"type": "text",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"type": "text",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"type": "text",
								"value": "{{app-id}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"payeeId\": \"578693\",\n\t\"accountNumber\": \"00000\",\n\t\"alias\": \"alias-test\",\n\t\"nameOnAccount\": \"name-on-account-test\",\n\t\"address\": {\n\t\t\"addressLine1\": \"PO BOX 51126\",\n\t\t\"city\": \"LOS ANGELES\",\n\t\t\"state\": {\n\t\t\t\"id\": \"CA\"\n\t\t},\n\t\t\"zipcode\": \"90051\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-payees",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-payees"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Registered Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59cb93f7-220a-4b9c-84a5-99378bb0f848",
								"exec": [
									"postman.clearEnvironmentVariable(\"registered_card\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"registered_card\", jsonData.data.id);",
									"tests[\"CardId updated: \"+postman.getEnvironmentVariable(\"registered_card\")] = true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}",
								"type": "text"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}",
								"type": "text"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"primaryAccountNumber\": \"4622941000000005\",\n  \"expirationDate\": \"2022-12\",\n  \"securityData\": {\n    \"id\": \"CVV\",\n    \"code\": \"973\"\n  },\n  \"nameOnAccount\": \"James Steward\",\n  \"alias\": \"VISA Gold\",\n  \"address\": {\n    \"addressLine1\":\"123\",\n    \"city\": \"Birmingham\",\n        \"state\": { \"id\": \"CA\" },\n        \"zipCode\": \"20147\",\n        \"country\": { \"id\": \"USA\" }\n    },\n    \"usageLimits\": { \"id\": \"SEND_AND_RECEIVE\" }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-cards",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-cards"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3943a252-d292-421d-a741-cbca5e77b425",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6dae28c1-2d1d-413d-8bee-ede57436b965",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "MM 2.0",
			"item": [
				{
					"name": "FBO to Internal",
					"item": [
						{
							"name": "POST Money Movement (FBO to INTERNAL)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_fbo_account}}\",\n    \"destinationAccount\": \"{{internal_non_fbo_account}}\",\n    \"transactionAmount\": {\n        \"amount\": 10.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check FBO to internal - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Internal to FBO",
					"item": [
						{
							"name": "POST Money Movement (INTERNAL to FBO)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_non_fbo_account}}\",\n    \"destinationAccount\": \"{{internal_fbo_account}}\",\n    \"transactionAmount\": {\n        \"amount\": 10.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check Internal to FBO - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Internal to bill payment",
					"item": [
						{
							"name": "POST Money Movement (INTERNAL to BP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_non_fbo_account}}\",\n    \"destinationAccount\": \"{{registered_payee_check}}\",\n    \"transactionAmount\": {\n        \"amount\": 10.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check Internal to FBO - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Card to non FBO",
					"item": [
						{
							"name": "POST Money Movement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{card_registered}}\",\n    \"destinationAccount\": \"{{internal_non_fbo_account}}\",\n    \"transactionAmount\": {\n        \"amount\": 1.00,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Card to Internal non FBO\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Internal to External",
					"item": [
						{
							"name": "POST Money Movement (not FBO to External)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_fbo_account}}\",\n    \"destinationAccount\": \"{{external_account}}\",\n    \"transactionAmount\": {\n        \"amount\": 12.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check FBO to external - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "External to External",
					"item": [
						{
							"name": "POST Money Movement (External to External)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_fbo_account}}\",\n    \"destinationAccount\": \"{{external_account}}\",\n    \"transactionAmount\": {\n        \"amount\": 12.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check FBO to external - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "External to bill payment",
					"item": [
						{
							"name": "POST Money Movement (External to CHECK bill payment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{external_account_2}}\",\n    \"destinationAccount\": \"{{registered_payee_check}}\",\n    \"transactionAmount\": {\n        \"amount\": 55.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n        {\n            \"key\": \"test_3\",\n            \"value\": \"External to Check bill payment - Demo 04-25-19\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Money Movement (External to ELECTRONIC bill payment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{external_account}}\",\n    \"destinationAccount\": \"{{registered_payee_electronic}}\",\n    \"transactionAmount\": {\n        \"amount\": 5.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test 6\",\n    \t\t\"value\":\"External to electronic bill payment electronic - Demo 04-25-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe93b8be-3be2-4b2c-92dc-7dcfbb026932",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f47df80a-6d1a-49cf-adcb-c55f2614a731",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "FBO to bill payment",
					"item": [
						{
							"name": "POST Money Movement (FBO to CHECK bill payment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_fbo_account}}\",\n    \"destinationAccount\": \"{{registered_payee_check}}\",\n    \"transactionAmount\": {\n        \"amount\": 103.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check FBO to bill payment - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Money Movement (FBO to ELECTRONIC bill payment)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_fbo_account}}\",\n    \"destinationAccount\": \"{{registered_payee_electronic}}\",\n    \"transactionAmount\": {\n        \"amount\": 5.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check FBO to bill payment electronic - Demo 04-24-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "FBO to card",
					"item": [
						{
							"name": "POST Money Movement (FBO to card)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_fbo_account}}\",\n    \"destinationAccount\": \"{{registered_card}}\",\n    \"transactionAmount\": {\n        \"amount\": 53.55,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check FBO to card - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "FBO to External",
					"item": [
						{
							"name": "POST Money Movement (FBO to External)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
										"exec": [
											"postman.clearEnvironmentVariable(\"mm_id\");",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"mm_id\", jsonData.data.id);",
											"tests[\"Money-movement Id updated: \"+postman.getEnvironmentVariable(\"mm_id\")] = true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Unique-Transaction-ID",
										"value": "{{$guid}}"
									},
									{
										"key": "Authorization",
										"value": "{{token_type}} {{token}}"
									},
									{
										"key": "vnd.bbva.consumer-uuid",
										"value": "{{customer_id}}"
									},
									{
										"key": "vnd.bbva.application-id",
										"value": "{{app-id-payments}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"originAccount\": \"{{internal_fbo_account}}\",\n    \"destinationAccount\": \"{{external_account}}\",\n    \"transactionAmount\": {\n        \"amount\": 12.97,\n        \"currency\": \"USD\"\n    },\n    \"metadata\": [\n    \t{\n    \t\t\"key\": \"test\",\n    \t\t\"value\":\"Check FBO to external - Demo 03-12-19\"\n    \t}\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v3/payments/money-movements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v3",
										"payments",
										"money-movements"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Validate card",
			"item": [
				{
					"name": "GET Validate card",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-cards/{{card_registered}}/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-cards",
								"{{card_registered}}",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validate payee",
			"item": [
				{
					"name": "GET Validate RP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3571eb63-d552-4a59-987e-fd641e12b71f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-payees/{{registered-payee-id}}/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-payees",
								"{{registered-payee-id}}",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payees PATCH endpoint",
			"item": [
				{
					"name": "PATCH Registered Payee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a221635-5c58-4669-936b-da45ba0da127",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Unique-Transaction-ID",
								"value": "{{$guid}}"
							},
							{
								"key": "Authorization",
								"value": "{{token_type}} {{token}}"
							},
							{
								"key": "vnd.bbva.consumer-uuid",
								"value": "{{customer_id}}"
							},
							{
								"key": "vnd.bbva.application-id",
								"value": "{{app-id-payments}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"accountNumber\": \"4820006030000000\",\n\t\"nameOnAccount\": \"Jenny Hudson\",\n\t\"alias\": \"Vanguard\",\n\t\"address\": {\n\t\t\"addressLine1\": \"PO BOX 51126\",\n\t\t\"city\": \"LOS ANGELES\",\n\t\t\"state\": {\n\t\t\t\"id\": \"CA\"\n\t\t},\n\t\t\"zipcode\": \"90051\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v3/payments/registered-payees/{{registered-payee-id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v3",
								"payments",
								"registered-payees",
								"{{registered-payee-id}}"
							]
						},
						"description": "Create a new transaction in ALNOVA.\n\nThe new transaction doesn't save in mongo."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8aa26836-d350-426a-aab5-5ff75a16ebef",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "67081ddd-97b3-4bea-9e90-97f5a83064cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Payee directory enhacements (to be defined)",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "28db32dc-c298-4e3d-b817-8218dad8d277",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "68776a36-6b1b-48d4-b82f-1972b0c3bbf1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}